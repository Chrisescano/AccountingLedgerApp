{
	"info": {
		"_postman_id": "b01380a3-4d1c-4331-bc04-9e76456fe7c2",
		"name": "accounting ledger",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31976523"
	},
	"item": [
		{
			"name": "Register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Registration should succeed\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"{{newUserName}}\",\r\n  \"password\": \"{{newUserPassword}}\",\r\n  \"confirmPassword\": \"{{newUserPassword}}\",\r\n  \"role\": \"USER\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - New User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"userToken\", pm.response.json().token);\r",
							"\r",
							"pm.test(\"User Login should create token\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.have.jsonBody(\"token\");\r",
							"    pm.expect(pm.environment.get(\"userToken\")).to.not.equal(\"\");\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"{{newUserName}}\",\r\n  \"password\": \"{{newUserPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - As Admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"adminToken\", pm.response.json().token)\r",
							"\r",
							"pm.test(\"Admin Login should succeed\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"admin\",\r\n  \"password\": \"password\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - As User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"userToken\", pm.response.json().token)\r",
							"\r",
							"pm.test(\"User Login should succeed\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "// {\r\n//   \"username\": \"{{currentUserName}}\",\r\n//   \"password\": \"{{currentPassword}}\"\r\n// }\r\n\r\n{\r\n    \"username\" : \"christian\",\r\n    \"password\" : \"ChristianPassword\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Get Existing Profile should succeed\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{userToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/profile",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Update Existing Profile should succeed\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{userToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": \"firstTestagain\",\r\n    \"lastName\": \"lastTest\",\r\n    \"email\": \"test@gmail.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/profile",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Ledger",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var transactions = pm.response.json()\r",
							"\r",
							"pm.test(\"Get Ledger should succeed\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(transactions).to.not.be.empty; //40 items in total\r",
							"    pm.expect(transactions).to.equal = 40;\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{userToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/ledger",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"ledger"
					]
				}
			},
			"response": []
		},
		{
			"name": "Adding a Transaction",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var items = pm.response.json();\r",
							"\r",
							"pm.test(\"adding a transaction should succeed\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.expect(items).to.not.be.empty;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{userToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"date\" : \"2024-01-12\",\r\n  \"time\" : \"12:00:00\",\r\n  \"description\" : \"testing negative amounts\",\r\n  \"vendor\" : \"sahara\",\r\n  \"amount\" : -50.45\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/transaction",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"transaction"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Transactions",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var transactions = pm.response.json();\r",
							"\r",
							"pm.test(\"searching transactions should succeed\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(transactions).to.not.be.empty; //3 in total\r",
							"    pm.expect(transactions).to.equal = 3;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{userToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/transaction?start=2024-01-01&end=2024-01-12",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"transaction"
					],
					"query": [
						{
							"key": "start",
							"value": "2024-01-01"
						},
						{
							"key": "end",
							"value": "2024-01-12"
						},
						{
							"key": "description",
							"value": "online",
							"disabled": true
						},
						{
							"key": "vendor",
							"value": "hub",
							"disabled": true
						},
						{
							"key": "min",
							"value": "5",
							"disabled": true
						},
						{
							"key": "max",
							"value": "10",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Deposits",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var transactions = pm.response.json();\r",
							"\r",
							"pm.test(\"getting transactions should succeed\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(transactions).to.not.be.empty; //10 in total\r",
							"    pm.expect(transactions).to.equal = 10;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{userToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/transaction/deposits",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"transaction",
						"deposits"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Payments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var transactions = pm.response.json();\r",
							"\r",
							"pm.test(\"getting payments should succeed\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(transactions).to.not.be.empty; //30 total\r",
							"    pm.expect(transactions).to.equal = 30;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{userToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/transaction/payments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"transaction",
						"payments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Filter - Month To Date",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var transactions = pm.response.json();\r",
							"\r",
							"pm.test(\"filtering for month to date should succeed\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(transactions).to.not.be.empty; //12 total\r",
							"    pm.expect(transactions).to.equal = 12;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{userToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/reports/month-to-date",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"reports",
						"month-to-date"
					]
				}
			},
			"response": []
		},
		{
			"name": "Filter - Previous Month",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//var transactions = pm.response.json();\r",
							"\r",
							"pm.test(\"filtering for previous month should succeed\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"    //empty for now - add 1 to make sure it works\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{userToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/reports/previous-month",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"reports",
						"previous-month"
					]
				}
			},
			"response": []
		},
		{
			"name": "Filter - Year To Date",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var transactions = pm.response.json();\r",
							"\r",
							"pm.test(\"filtering from year to date should succeed\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(transactions).to.not.be.empty; //12 total\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{userToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/reports/year-to-date",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"reports",
						"year-to-date"
					]
				}
			},
			"response": []
		},
		{
			"name": "Filter - Previous Year",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"filtering by previous year should succeed\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"    //empty for now - maybe add 1\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{userToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/reports/previous-year",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"reports",
						"previous-year"
					]
				}
			},
			"response": []
		},
		{
			"name": "Filter - By Vendor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var transactions = pm.response.json();\r",
							"\r",
							"pm.test(\"filtering by vendor should succeed\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.expect(transactions).to.not.be.empty; //1 total\r",
							"    pm.expect(transactions).to.equal = 1\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{userToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/reports?vendor=Organizer",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"reports"
					],
					"query": [
						{
							"key": "vendor",
							"value": "Organizer"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "adminToken",
			"value": "adminToken",
			"type": "string"
		},
		{
			"key": "userToken",
			"value": "userToken",
			"type": "string"
		},
		{
			"key": "newUserName",
			"value": "gary",
			"type": "string"
		},
		{
			"key": "newUserPassword",
			"value": "thePass",
			"type": "string"
		},
		{
			"key": "currentUserName",
			"value": "christian",
			"type": "string"
		},
		{
			"key": "currentPassword",
			"value": "ChristianPassword",
			"type": "string"
		}
	]
}